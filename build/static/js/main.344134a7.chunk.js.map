{"version":3,"sources":["components/header/Navigation.js","components/header/Header.js","components/body/Loading.js","components/body/Home.js","components/body/GalleryItem.js","components/body/LoadComments.js","components/redux/actionCreators.js","components/redux/actionTypes.js","components/body/CommentForm.js","components/body/PhotoDetails.js","components/body/Gallery.js","components/body/Body.js","components/footer/Footer.js","components/MainComponent.js","components/redux/reducer.js","components/redux/store.js","App.js","serviceWorker.js","index.js"],"names":["Navigation","props","navToggle","setState","isNavOpen","state","Navbar","color","light","expand","className","NavbarToggler","onClick","this","NavbarBrand","href","Collapse","navbar","isOpen","Nav","NavItem","to","Component","header","Loading","style","padding","Home","document","title","GalleryItem","CardBody","CardImg","width","src","photo","image","CardText","description","Button","DishSelect","LoadComments","commentIsLoading","comments","map","comment","key","imageId","author","rating","dateFormat","date","commentStatus","type","payload","fetchComments","dispatch","axios","get","then","response","data","CommentForm","handleInputChange","event","target","name","value","handleSubmit","addComment","preventDefault","modalToggle","updateComments","bind","form","Form","onSubmit","Input","placeholder","onChange","required","isModalOpen","Modal","ModalBody","modalMsg","connect","PhotoDetails","Card","marginTop","textAlign","CardTitle","Gallery","selectedPhoto","modalOpen","onDishSelect","item","fetchPhotos","photos","isLoading","errMess","Alert","gallery","photoDetail","filter","commentsIsLoading","margin","ModalFooter","newComment","Date","toISOString","post","status","catch","error","message","body","path","exact","component","from","footer","MainComponent","Header","Body","Footer","Reducer","combineReducers","photoState","action","commentState","push","id","console","log","myStore","createStore","applyMiddleware","logger","thunk","App","store","Boolean","window","location","hostname","match","ReactDOM","render","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.344134a7.chunk.js","sourcesContent":["\r\nimport React, { Component } from 'react';\r\nimport { Link } from 'react-router-dom';\r\nimport { Navbar, NavbarBrand, Nav, NavItem, NavbarToggler, Collapse } from 'reactstrap';\r\n\r\nclass Navigation extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            isNavOpen: false\r\n        }\r\n    }\r\n\r\n    navToggle = () => {\r\n        this.setState({\r\n            isNavOpen: !this.state.isNavOpen\r\n        })\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div>\r\n                <Navbar color='light' light expand=\"sm\">\r\n                    <div className=\"container\">\r\n\r\n                        <NavbarToggler onClick={this.navToggle} />\r\n                        <NavbarBrand href=\"/\">Photo Gallery</NavbarBrand>\r\n                        <Collapse navbar isOpen={this.state.isNavOpen}>\r\n                            <Nav className=\"mr-auto\" navbar>\r\n                                <NavItem>\r\n                                    <Link to='/' className=\"nav-link active\">Home</Link>\r\n                                </NavItem>\r\n\r\n                                <NavItem>\r\n                                    <Link to='/Gallery' className=\"nav-link \">Gallery</Link>\r\n                                </NavItem>\r\n                            </Nav>\r\n                        </Collapse>\r\n                    </div>\r\n                </Navbar>\r\n            </div>\r\n        );\r\n    }\r\n\r\n}\r\n\r\nexport default Navigation;","import React from 'react';\r\nimport Navigation from './Navigation';\r\n\r\nconst header = () => {\r\n    return (\r\n        <div>\r\n            <Navigation />\r\n        </div>\r\n    );\r\n}\r\nexport default header;","import React from 'react';\n\n\nconst Loading = () => {\n    return (\n        <div className='col-12' style={{ padding: '60px' }}>\n            <span className=\"fa fa-spinner fa-5x fa-fw fa-pulse \"></span>\n        </div>\n    )\n}\n\nexport default Loading;","import React, { Component } from 'react';\nimport Loading from './Loading';\n\n\n\nclass Home extends Component {\n    render() {\n        document.title = 'Home';\n        return (\n            <div>\n                <Loading />\n            </div>\n        );\n    }\n}\n\nexport default Home;","import React from 'react';\r\nimport { CardImg,  CardBody, CardText, Button } from 'reactstrap';\r\n\r\nconst GalleryItem = props => {\r\n   \r\n\r\n    return (\r\n\r\n        <div>\r\n            \r\n            \r\n                <CardBody>\r\n                    <CardImg\r\n                        width=\"60rem\"\r\n                        src={props.photo.image}\r\n                    />\r\n                    <br/>\r\n                    \r\n                      <CardText>\r\n                          Description: <h5 className=\"text-danger\">{props.photo.description}</h5> \r\n                      </CardText>\r\n                      <Button  color=\"info\" onClick={props.DishSelect}>\r\n                          Keep a Comment\r\n                      </Button>\r\n                   \r\n                </CardBody>\r\n            \r\n           \r\n            \r\n           <br/>\r\n\r\n        </div>\r\n    );\r\n};\r\nexport default GalleryItem;","import React from 'react';\nimport dateFormat from 'dateformat';\nimport Loading from \"./Loading\";\n\n\nconst LoadComments = props => {\n    if (props.commentIsLoading) {\n        return <Loading />\n    } else {\n        return (\n            props.comments.map(comment => {\n                return (\n                    <div key={comment.imageId}>\n                        <h5 className=\"text-success\">{comment.author}</h5>\n                        <p>{comment.comment}</p>\n                        <p>Ratings:{comment.rating}</p>\n                        <p>{dateFormat(comment.date, \"dddd, mmmm dS, yyyy, h:MM:ss TT\")}</p>\n                    </div>\n                );\n            })\n\n\n        );\n    }\n\n}\nexport default LoadComments;","import * as actionTypes from './actionTypes';\r\nimport axios from 'axios';\r\n\r\nexport const loadPhotos = photos => ({\r\n    type: actionTypes.LOAD_PHOTOS,\r\n    payload: photos,\r\n})\r\n\r\nexport const photosLoading = () => ({\r\n    type: actionTypes.PHOTOS_LOADING\r\n})\r\n\r\nexport const photosFailed = (errMess) => ({\r\n    type: actionTypes.PHOTOS_FAILED,\r\n    payload: errMess,\r\n})\r\n\r\nexport const fetchPhotos = () => {\r\n    return dispatch => {\r\n        dispatch(photosLoading());\r\n\r\n        axios.get('https://photo-gallery-project-1a9da.firebaseio.com/' + 'photos.json')\r\n            .then(response => {\r\n                dispatch(loadPhotos(response.data));\r\n\r\n            })\r\n\r\n            .catch(error => dispatch(photosFailed(error.message)))\r\n\r\n\r\n            ;\r\n\r\n\r\n    }\r\n}\r\n\r\nexport const addComment = (imageId, rating, author, comment) => dispatch => {\r\n    const newComment = {\r\n        imageId: imageId,\r\n        author: author,\r\n        rating: rating,\r\n        comment: comment\r\n    }\r\n    newComment.date = new Date().toISOString();\r\n\r\n    axios.post('https://photo-gallery-project-1a9da.firebaseio.com/comments.json', newComment)\r\n\r\n        .then(response => {\r\n            dispatch(commentStatus(response.status));\r\n\r\n        })\r\n}\r\n\r\nexport const commentStatus = (commentStatus) => ({\r\n    type: actionTypes.ADD_COMMENT,\r\n    payload: commentStatus,\r\n})\r\n\r\nexport const commentLoading = () => ({\r\n    type: actionTypes.COMMENT_LOADING\r\n})\r\n\r\nexport const loadComments = comments => ({\r\n    type: actionTypes.LOAD_COMMENTS,\r\n    payload: comments\r\n})\r\nexport const updateComments = () => ({\r\n    type: actionTypes.UPDATE_COMMENT,\r\n})\r\nexport const fetchComments = () => dispatch => {\r\n    dispatch(commentLoading());\r\n\r\n    axios.get('https://photo-gallery-project-1a9da.firebaseio.com/' + 'comments.json')\r\n        .then(response => {\r\n            dispatch(loadComments(response.data))\r\n\r\n\r\n\r\n        })\r\n\r\n}\r\n","export const PHOTOS_LOADING = 'PHOTOS_LOADING';\r\nexport const LOAD_PHOTOS = 'LOAD_PHOTOS';\r\nexport const PHOTOS_FAILED = 'PHOTOS_FAILED';\r\n\r\nexport const ADD_COMMENT = 'ADD_COMMENT';\r\nexport const UPDATE_COMMENT=\"UPDATE_COMMENT\";\r\n\r\nexport const LOAD_COMMENTS = 'LOAD_COMMENTS';\r\nexport const COMMENT_LOADING = ' COMMENT_LOADING';","import React, { Component } from 'react';\nimport { Form, Button, Input, Modal, ModalBody } from 'reactstrap';\nimport { connect } from 'react-redux';\nimport { fetchComments, updateComments } from '../redux/actionCreators';\nimport Loading from \"./Loading\";\nconst mapDishpatchToProps = (dispatch) => {\n    return {\n        updateComments: () => dispatch(updateComments()),\n        fetchComments: () => dispatch(fetchComments())\n    }\n}\n\n\nclass CommentForm extends Component {\n\n    constructor(props) {\n        super(props);\n        this.state = {\n            author: '',\n            rating: '',\n            comment: ''\n        }\n        this.handleInputChange = this.handleInputChange.bind(this);\n        this.handleSubmit = this.handleSubmit.bind(this);\n    }\n\n    handleInputChange = event => {\n        this.setState({\n            [event.target.name]: event.target.value\n        })\n    }\n\n    handleSubmit = event => {\n\n\n        this.props.addComment(this.props.imageId, this.state.rating, this.state.author, this.state.comment);\n\n        this.setState({\n            author: '',\n            rating: '',\n            comment: ''\n        });\n\n        event.preventDefault();\n\n    }\n    modalToggle = () => {\n        this.props.updateComments();\n        this.props.fetchComments();\n    }\n\n\n    render() {\n        let form = (\n            <div>\n                <Form onSubmit={this.handleSubmit}>\n                    <Input\n                        type=\"text\"\n                        name=\"author\"\n                        value={this.state.author}\n                        placeholder=\"Your Name\"\n                        onChange={this.handleInputChange}\n                        required />\n                    <br />\n                    <Input\n                        type=\"select\"\n                        name=\"rating\"\n                        value={this.state.rating}\n                        onChange={this.handleInputChange} >\n                        <option>1</option>\n                        <option>2</option>\n                        <option>3</option>\n                        <option>4</option>\n                        <option>5</option>\n                    </Input>\n                    <br />\n                    <Input\n                        type=\"textarea\"\n                        name=\"comment\"\n                        value={this.state.comment}\n                        placeholder=\"Your Comment\"\n                        onChange={this.handleInputChange}\n                        required>\n                    </Input>\n                    <br />\n                    <Button  color=\"info\" type=\"submit\">Submit Comment</Button>\n                </Form>\n            </div>\n        )\n        return (\n            <div>\n                <div className=\"container\">\n                    {this.props.isModalOpen ? <Loading /> : form}\n                </div>\n\n                <div>\n                    <Modal isOpen={this.props.isModalOpen}>\n\n                        <ModalBody > {this.props.modalMsg} </ModalBody>\n                        <Button  color=\"info\" onClick={this.modalToggle}>\n                            Close\n                    </Button>\n                    </Modal>\n                </div>\n\n            </div>\n\n        );\n    }\n}\n\nexport default connect(null, mapDishpatchToProps)(CommentForm);","import React from 'react';\r\nimport { Card,CardTitle, CardBody } from 'reactstrap';\r\nimport LoadComments from './LoadComments';\r\nimport CommentForm from './CommentForm';\r\n\r\n\r\nconst PhotoDetails = (props) => {\r\n   \r\n    document.title = \"PhotoDetails\";\r\n    return (\r\n        <div>\r\n            <Card style={{ marginTop: \"5px\" }}>\r\n             \r\n                <CardBody style={{ textAlign: \"left\" }}>\r\n                    <CardTitle >\r\n                        <h2 className=\"text-primary\">{props.photo.description}</h2>\r\n                        </CardTitle>\r\n                    <hr />\r\n                    <LoadComments comments={props.comments} commentIsLoading={props.commentIsLoading}/>\r\n                    <hr />\r\n                    <CommentForm imageId={props.photo.imageId} addComment={props.addComment} \r\n                    isModalOpen={props.isModalOpen} modalMsg={props.modalMsg}/>\r\n                </CardBody>\r\n            </Card>\r\n        </div>\r\n\r\n    );\r\n}\r\n\r\nexport default PhotoDetails;","import React, { Component } from 'react';\r\nimport GalleryItem from './GalleryItem';\r\nimport PhotoDetails from './PhotoDetails';\r\nimport { Card, Modal, ModalBody, ModalFooter, Button, Alert, } from 'reactstrap';\r\nimport { connect } from 'react-redux';\r\nimport { addComment, fetchComments, fetchPhotos } from '../redux/actionCreators';\r\nimport Loading from './Loading';\r\n\r\nconst mapDishpatchToProps = (dispatch) => {\r\n    return {\r\n        addComment: (imageId, rating, author, comment) => dispatch(addComment(imageId, rating, author, comment)),\r\n\r\n        fetchPhotos: () => dispatch(fetchPhotos()),\r\n        fetchComments: () => dispatch(fetchComments()),\r\n\r\n    }\r\n}\r\n\r\nconst mapStateToProps = state => {\r\n    return {\r\n        photos: state.photos,\r\n        comments: state.comments\r\n    }\r\n}\r\n\r\n\r\nclass Gallery extends Component {\r\n\r\n    state = {\r\n\r\n        selectedPhoto: null,\r\n        modalOpen: false\r\n    }\r\n\r\n\r\n\r\n    onDishSelect = item => {\r\n\r\n        this.setState({\r\n            selectedPhoto: item,\r\n            modalOpen: !this.state.modalOpen\r\n        });\r\n\r\n\r\n    }\r\n    modalToggle = () => {\r\n        this.setState({\r\n            modalOpen: !this.state.modalOpen,\r\n            selectedPhoto: null,\r\n        });\r\n    }\r\n\r\n    componentDidMount() {\r\n\r\n        this.props.fetchPhotos();\r\n        this.props.fetchComments();\r\n\r\n\r\n    }\r\n\r\n    render() {\r\n        document.title = 'Gallery';\r\n\r\n        if (this.props.photos.isLoading) {\r\n            return (\r\n\r\n                <Loading />\r\n\r\n            );\r\n        }\r\n        else if (this.props.photos.errMess) {\r\n            return (\r\n                <Alert color=\"danger\">{this.props.photos.errMess}</Alert>\r\n            )\r\n        }\r\n        else {\r\n\r\n            const gallery = this.props.photos.photos.map(item => {\r\n\r\n                return (\r\n                    <GalleryItem photo={item} key={item.imageId} DishSelect={() => this.onDishSelect(item)} />\r\n                );\r\n            })\r\n\r\n            let photoDetail = null;\r\n            if (this.state.selectedPhoto != null) {\r\n\r\n                const comments = this.props.comments.comments.filter(comment => {\r\n                    return comment.imageId === this.state.selectedPhoto.imageId;\r\n                })\r\n\r\n                photoDetail = <PhotoDetails photo={this.state.selectedPhoto} comments={comments} isModalOpen={this.props.comments.isModalOpen} modalMsg={this.props.comments.modalMsg}\r\n                    addComment={this.props.addComment} commentsIsLoading={this.props.comments.isLoading} />\r\n            }\r\n\r\n            return (\r\n                <div className=\"container\">\r\n                    <div className=\"row\" >\r\n                        <Card style={{ margin: '5px', width: \"60rem\",}}>\r\n                            {gallery}\r\n                        </Card>\r\n                        \r\n                        <Modal isOpen={this.state.modalOpen} >\r\n                            <ModalBody>\r\n                                {photoDetail}\r\n                            </ModalBody>\r\n                            <ModalFooter>\r\n                                <Button  color=\"info\" onClick={this.modalToggle}>\r\n                                    Close\r\n                    </Button>\r\n                            </ModalFooter>\r\n                        </Modal>\r\n                    </div>\r\n\r\n                </div>\r\n            );\r\n        }\r\n    }\r\n\r\n}\r\nexport default connect(mapStateToProps, mapDishpatchToProps) (Gallery);","import React from 'react';\r\nimport Home from './Home';\r\nimport Gallery from './Gallery'\r\nimport { Redirect, Route, Switch } from 'react-router';\r\n\r\nconst body = () => {\r\n    return (\r\n        <div>\r\n            <Switch>\r\n                <Route path='/home' exact component={Home} />\r\n                <Route path='/Gallery' exact component={Gallery} />\r\n                <Redirect from='/' to='/home' />\r\n            </Switch>\r\n           \r\n        </div>\r\n    );\r\n}\r\nexport default body;","import React from 'react';\r\n\r\nconst footer = () => {\r\n    return (\r\n\r\n        <div className=\"footer\">\r\n            <div className=\"container\">\r\n                <div className=\"row justify-content-center\">\r\n                    <div className=\"col-auto\">\r\n                        <p> Photo-Gallery &#169; Copyright 2020</p>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n        </div>\r\n\r\n\r\n    );\r\n}\r\nexport default footer;","import React from 'react';\r\nimport Header from './header/Header';\r\nimport Body from './body/Body';\r\nimport Footer from './footer/Footer';\r\n\r\nconst MainComponent = () => {\r\n    return (\r\n        <div>\r\n          \r\n            <Header/>\r\n            <Body />\r\n            <Footer/>\r\n           \r\n\r\n        </div>\r\n    );\r\n}\r\nexport default MainComponent;","import * as actionTypes from './actionTypes';\r\nimport { combineReducers } from 'redux';\r\n\r\nconst photosReducer = (photoState = { isLoading: false, photos: [], errMess: null }, action) => {\r\n    switch (action.type) {\r\n        case actionTypes.PHOTOS_LOADING:\r\n            return {\r\n                ...photoState,\r\n                isLoading: true,\r\n                errMess: null,\r\n                photos: []\r\n            }\r\n        case actionTypes.LOAD_PHOTOS:\r\n            return {\r\n                ...photoState,\r\n                isLoading: false,\r\n                errMess: null,\r\n                photos: action.payload\r\n            }\r\n        case actionTypes.PHOTOS_FAILED:\r\n            return {\r\n                ...photoState,\r\n                isLoading: false,\r\n                errMess: action.payload,\r\n                photos: []\r\n            }\r\n        default:\r\n            return photoState;\r\n    }\r\n}\r\nconst commentReducer = (commentState = {\r\n    isLoading: true, comments: [], isModalOpen: false,\r\n    modalMsg: \"\"\r\n}, action) => {\r\n    switch (action.type) {\r\n        case actionTypes.LOAD_COMMENTS:\r\n            let comments = [];\r\n            for (let key in action.payload) {\r\n                comments.push({\r\n                    ...action.payload[key],\r\n                    id: key,\r\n                })\r\n            }\r\n            return {\r\n                ...commentState,\r\n                isLoading: false,\r\n                comments: comments,\r\n                isModalOpen: false,\r\n                modalMsg: \"\",\r\n            };\r\n        case actionTypes.COMMENT_LOADING:\r\n            return {\r\n                ...commentState,\r\n                isLoading: true,\r\n                comments: [],\r\n                isModalOpen: false,\r\n                modalMsg: \"\",\r\n\r\n            };\r\n\r\n        case actionTypes.ADD_COMMENT:\r\n            console.log(action.payload);\r\n            if (action.payload === 200) {\r\n                return {\r\n                    ...commentState,\r\n                    isLoading: false,\r\n                    isModalOpen: true,\r\n                    modalMsg: \"Comment Submitted\"\r\n                }\r\n            } else {\r\n                return {\r\n                    ...commentState,\r\n                    isLoading: false,\r\n                    isModalOpen: true,\r\n                    modalMsg: \"Something Went Wrong! Comment Again\"\r\n                }\r\n            };\r\n        case actionTypes.UPDATE_COMMENT:\r\n            return {\r\n                ...commentState,\r\n                isModalOpen: false,\r\n                modalMsg: \"\",\r\n            }\r\n        default:\r\n            return commentState;\r\n    }\r\n\r\n}\r\n\r\nexport const Reducer = combineReducers({\r\n    photos: photosReducer,\r\n    comments: commentReducer,\r\n\r\n});\r\n","import { createStore, applyMiddleware } from 'redux';\r\nimport { Reducer } from './reducer';\r\nimport logger from 'redux-logger';\r\nimport thunk from 'redux-thunk';\r\n\r\nconst myStore = createStore(Reducer, applyMiddleware(logger, thunk));\r\n\r\nexport default myStore;","import React from 'react';\nimport './App.css';\nimport MainComponent from './components/MainComponent';\nimport { BrowserRouter } from 'react-router-dom';\nimport myStore from './components/redux/store';\nimport { Provider } from 'react-redux';\n\nconst  App=()=> {\n  return (\n    <div className=\"App\">\n       <Provider store={myStore}>\n       <BrowserRouter>\n      <MainComponent />\n      </BrowserRouter>\n       </Provider>\n    \n   \n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport 'bootstrap/dist/css/bootstrap.css';\nimport 'font-awesome/css/font-awesome.css';\n\n\n\nReactDOM.render(\n\n    <App />\n,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nserviceWorker.unregister();"],"sourceRoot":""}